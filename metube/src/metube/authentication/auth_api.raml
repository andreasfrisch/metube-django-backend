#%RAML 1.0
title: Leo Innovation Lab Identity Service
version: 1.0
baseUri: https://api.leoilab.com
mediaType: application/json
securitySchemes:
  auth:
    type: Pass Through
    describedBy:
      headers:
        Authorization:
          description: Used to send a valid auth token by setting value to "Bearer {accessToken}". {accessToken} is returned upon creation or login. Do not use together with the "accessToken" query parameter.
      queryParameters:
        accessToken:
          description: Used to send a valid auth token. Use only with GET requests. Do not use together with the "Authorization" header
traits:
  authorized:
    description: Request requires authorization.
    responses:
      403:
        body:
          examples:
            1005: |
              {
                "code": "users-1005",
                "msg": "Unauthorized access to user {userId} by user {authorizedUserId} for client {client}"
              }
      401:
        body:
          examples:
            1008: |
              {
                "code": "users-1008",
                "msg": "Provided access token is expired - please log in again."
              }
  userid:
    description: Request requires a valid userId.
    responses:
      400:
        body:
          examples:
            1004 (deprecated): |
              {
                "code": "users-1004",
                "msg": "Invalid UUID ({string}) for UserId"
              }
      404:
        body:
          examples:
            1001: |
              {
                "code": "users-1001",
                "msg": "User {userId} not found for client {client}"
              }
  mailInteracting:
    responses:
      400:
        description: An error occured when trying to provide a requested mail service.
        body:
          application/json:
            examples:
              1018: |
                {
                  "code": "users-1018",
                  "msg": "'{email}' is not a valid email address."
                }
              1019: |
                {
                  "code": "users-1019",
                  "msg": "Bounced when sending to '{email}' for {clientId}: {message}."
                }
      503:
        description: An error occured when trying to provide a requested mail service.
        body:
          application/json:
            examples:
              1030: |
                {
                  "code": "users-1030",
                  "msg": "Mail service unavailable"
                }

  passwordUpdating:
    responses:
      400:
        description: For **1022**, see https://blogs.dropbox.com/tech/2012/04/zxcvbn-realistic-password-strength-estimation/ regarding password strength.
        body:
          examples:
            1022: |
              {
                "code": "users-1022",
                "msg": "Password strength is required to be at least 3."
              }


types:
  profileDTO:
    type: object
    properties:
      preferredName?: string
      fullName?: string
      firstName?: string
      lastName?: string
      birthDate?: birthDateDTO
      gender?: string
      sex?:
        enum: ["male", "intersex", "female"]
      heightInCm?: integer
      weightInKg?:
        type: number
        format: double
      address?: addressDTO
      timezone?: string
  birthDateDTO:
    type: object
    properties:
      year?: integer
      month?: integer
      day?: integer
  addressDTO:
    type: object
    properties:
      streetAndNumber?: string
      city?: string
      zipcode?: string
      country?: string
  termIdDTO:
    type: object
    properties:
      termId: string
  termAcceptedDTO:
    type: object
    properties:
      isAccepted: boolean
  deleteByEmailDTO:
    type: object
    properties:
      email: string
  magicLinkDTO:
    type: object
    properties:
      email: string
      locale?: string
  userIdDTO:
    type: object
    properties:
      id: string
  policyName:
    type: string
    maxLength: 191
  policyContents:
    type: string
    maxLength: 65535
  policyDTO:
    type: object
    properties:
      id?: string
      name: policyName
      contents: policyContents
  attachDTO:
    type: object
    properties:
      userId: string
  policyUpdateDTO:
    type: object
    properties:
      name: string
      contents: string
  userDTO:
    type: object
    properties:
      id: string
      isAdmin: boolean
      groupId: string
      username: string
      email: string
      properties: object
      created: datetime
      modified: datetime
      active: boolean
      profile: profileDTO
      email_confirmed_at?: datetime
      identityProvider: string
      facebookId?: string
      digitigerId?: string
  authDTO:
    type: object
    properties:
      tokenType: string
      issuedAt: datetime
      expiresIn: string
      accessToken: string
      refreshToken: string
  loginDTO:
    type: object
    properties:
      user: userDTO
      auth: authDTO
  introspectionDTO:
    type: object
    properties:
      active: boolean

/v1/users:
  post:
    displayName: Create new user
    description: |
      You can create a user using the platform as the identity provider. In that case the fields `username`, `email` and
      `password` are required.
      `username` and `email` must be unique for the given client.
      Comparison for uniqueness is case insensitive, ignores character modifications (i.e 'é'=='e', 'ñ'=='n', etc.), and does not respect unique emojis.

      Facebook can also be used as an identity provider. To use Facebook as an identity provider the field `signedRequest`
      is required. The signed request is obtained from Facebook.
      See https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow for more information.
      The created user will be assigned the email associated with her facebook account, or a random string if the email is not extractable. 

      Digitiger is also an identity provider. To use Digitiger as an identity provider the fields `digitigerId` and `signature`
      are required. The id is obtained from Digitiger and must be encrypted with a known pre-shared key and provided as
      the signature for verification.
      A random string will be saved as the users email and username.
    is: [passwordUpdating]
    headers:
      X-Client-Id:
        description: Client application id
        example: imagine
        required: true
    body:
      application/json:
        properties:
          username?: string
          email?: string
          password?: string
          signedRequest?: string
          properties?: object
          profile?: profileDTO
        examples:
          platformIdentityServiceExample: |
            {
              "username": "anders.nickelsen@leoilab.com",
              "email": "anders.nickelsen@leoilab.com",
              "password": "correcthorsebatterystaple",
              "properties": {
                "role": "doctor",
                "status": "activated"
              },
              "profile": {
                  "preferredName": "Mr Hansen",
                  "fullName": "Hans Hansen",
                  "firstName": "Hans",
                  "lastName": "Hansen",
                  "birthDate": {
                      "year": 1952,
                      "month": 8,
                      "day": 20
                  },
                  "gender": "unicorn",
                  "sex": "male",
                  "heightInCm": 175,
                  "weightInKg": 82.6,
                  "address": {
                      "streetAndNumber": "Somewhere 1",
                      "city": "Over The Rainbow",
                      "zipcode": "21A53B",
                      "country": "Anywhere"
                  },
                  "timezone": "GMT"
              }
            }
          facebookIdentityServiceExample: |
            {
              "signedRequest": "QiOiJlOTA5NmU4My1jNjYxLTQ3NDAtOWVmZC0wMjZkNTcxNWM5NzUiLCJjbGllbnRJZCI6InRlc3QiLCJpc3N1ZWRBdCI6IjIwMTYtMTEtMjF",
              "properties": {
                "role": "patient",
                "status": "activated"
              },
              "profile": {
                "preferredName": "Mr Hansen",
                "fullName": "Hans Hansen",
                "firstName": "Hans",
                "lastName": "Hansen",
                "birthDate": {
                    "year": 1952,
                    "month": 8,
                    "day": 20
                },
                "gender": "unicorn",
                "sex": "male",
                "heightInCm": 175,
                "weightInKg": 82.6,
                "address": {
                    "streetAndNumber": "Somewhere 1",
                    "city": "Over The Rainbow",
                    "zipcode": "21A53B",
                    "country": "Anywhere"
                },
                "timezone": "GMT"
              }
            }
          digitigerIdentityServiceExample: |
            {
              "digitigerId": "c2e6f498-2a79-11e7-93ae-92361f002671",
              "signature": "124C1814C601D243C260DA77A62FE9C02736BF78E9633DF064EF7AC021C5D695508AF4101308320824D5B9ACFB57867B6BAAF612813F24CEBA68CB082E5E2A05810B143F21489F07BA5A753DBD8E531EA95274550BB31BB06C74A0C4E2E4FE8CC84BD531688FC01543805D110914161108952DAA7BF9FE0B356953E52896D3EE"
            }
    responses:
      200:
        body:
          examples:
            platformIdentityService: |
              {
                "user": {
                  "email": "anders.nickelsen@leoilab.com",
                  "isAdmin": false,
                  "username": "anders.nickelsen@leoilab.com",
                  "groupId": "fe5b0540-59be-48fe-9795-d102bdd47080",
                  "modified": "2016-11-21T13:16:09+01:00",
                  "id": "e9096e83-c661-4740-9efd-026d5715c975",
                  "identityProvider": "leoilab",
                  "properties": {},
                  "profile": {
                      "preferredName": "Mr Hansen",
                      "fullName": "Hans Hansen",
                      "firstName": "Hans",
                      "lastName": "Hansen",
                      "birthDate": {
                          "year": 1952,
                          "month": 8,
                          "day": 20
                      },
                      "gender": "unicorn",
                      "sex": "male",
                      "heightInCm": 175,
                      "weightInKg": 82.6,
                      "address": {
                          "streetAndNumber": "Somewhere 1",
                          "city": "Over The Rainbow",
                          "zipcode": "21A53B",
                          "country": "Anywhere"
                      },
                      "timezone": "GMT"
                  },
                  "created": "2016-11-21T13:16:09+01:00",
                  "active": true
                },
                "auth": {
                  "tokenType": "bearer",
                  "expiresIn": "600",
                  "issuedAt": "2016-11-21T13:16:09+01:00",
                  "refreshToken": "meq5h3qxrn23wnotfqkahnxfpc67bfwp",
                  "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJlOTA5NmU4My1jNjYxLTQ3NDAtOWVmZC0wMjZkNTcxNWM5NzUiLCJjbGllbnRJZCI6InRlc3QiLCJpc3N1ZWRBdCI6IjIwMTYtMTEtMjFUMTM6MTY6MDkrMDE6MDAiLCJleHBpcmVzSW4iOiI2MDAifQ.R5_sDJgxbYKe4fOxcZXfPO8uZ09RbB1JmWZVZXpNbKw"
                }
              }
            facebookIdentityService: |
              {
                "user": {
                  "email": "MLBxcgOiUe",
                  "username": "MLBxcgOiUe",
                  "groupId": "fe5b0540-59be-48fe-9795-d102bdd47080",
                  "modified": "2016-11-21T13:16:09+01:00",
                  "id": "e9096e83-c661-4740-9efd-026d5715c975",
                  "identityProvider": "facebook",
                  "facebookId": "112946565908184",
                  "properties": {},
                  "profile": {
                      "preferredName": "Mr Hansen",
                      "fullName": "Hans Hansen",
                      "firstName": "Hans",
                      "lastName": "Hansen",
                      "birthDate": {
                          "year": 1952,
                          "month": 8,
                          "day": 20
                      },
                      "gender": "unicorn",
                      "sex": "male",
                      "heightInCm": 175,
                      "weightInKg": 82.6,
                      "address": {
                          "streetAndNumber": "Somewhere 1",
                          "city": "Over The Rainbow",
                          "zipcode": "21A53B",
                          "country": "Anywhere"
                      },
                      "timezone": "GMT"
                  },
                  "created": "2016-11-21T13:16:09+01:00",
                  "active": true
                },
                "auth": {
                  "tokenType": "bearer",
                  "expiresIn": "600",
                  "issuedAt": "2016-11-21T13:16:09+01:00",
                  "refreshToken": "meq5h3qxrn23wnotfqkahnxfpc67bfwp",
                  "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJlOTA5NmU4My1jNjYxLTQ3NDAtOWVmZC0wMjZkNTcxNWM5NzUiLCJjbGllbnRJZCI6InRlc3QiLCJpc3N1ZWRBdCI6IjIwMTYtMTEtMjFUMTM6MTY6MDkrMDE6MDAiLCJleHBpcmVzSW4iOiI2MDAifQ.R5_sDJgxbYKe4fOxcZXfPO8uZ09RbB1JmWZVZXpNbKw"
                }
              }
            digitigerIdentityService: |
              {
                "user": {
                  "email": "MLBxcgOiUe",
                  "username": "MLBxcgOiUe",
                  "groupId": "fe5b0540-59be-48fe-9795-d102bdd47080",
                  "modified": "2016-11-21T13:16:09+01:00",
                  "id": "e9096e83-c661-4740-9efd-026d5715c975",
                  "identityProvider": "digitiger",
                  "digitigerId": "c2e6f498-2a79-11e7-93ae-92361f002671",
                  "properties": {},
                  "profile": {
                      "preferredName": "Mr Hansen",
                      "fullName": "Hans Hansen",
                      "firstName": "Hans",
                      "lastName": "Hansen",
                      "birthDate": {
                          "year": 1952,
                          "month": 8,
                          "day": 20
                      },
                      "gender": "unicorn",
                      "sex": "male",
                      "heightInCm": 175,
                      "weightInKg": 82.6,
                      "address": {
                          "streetAndNumber": "Somewhere 1",
                          "city": "Over The Rainbow",
                          "zipcode": "21A53B",
                          "country": "Anywhere"
                      },
                      "timezone": "GMT"
                  },
                  "created": "2016-11-21T13:16:09+01:00",
                  "active": true
                },
                "auth": {
                  "tokenType": "bearer",
                  "expiresIn": "600",
                  "issuedAt": "2016-11-21T13:16:09+01:00",
                  "refreshToken": "meq5h3qxrn23wnotfqkahnxfpc67bfwp",
                  "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJlOTA5NmU4My1jNjYxLTQ3NDAtOWVmZC0wMjZkNTcxNWM5NzUiLCJjbGllbnRJZCI6InRlc3QiLCJpc3N1ZWRBdCI6IjIwMTYtMTEtMjFUMTM6MTY6MDkrMDE6MDAiLCJleHBpcmVzSW4iOiI2MDAifQ.R5_sDJgxbYKe4fOxcZXfPO8uZ09RbB1JmWZVZXpNbKw"
                }
              }
      400:
        body:
          examples:
            1002: |
              {
                "code": "users-1002",
                "msg": "User {username} already exists for client {client}"
              }
            1025: |
              {
                "code": "users-1025",
                "msg": "Unable to verify signature of digitiger id."
              }
            1026: |
              {
                "code": "users-1026",
                "msg": "The email address '${email}' extracted from signed request is already registered for {clientId}.",
                "errorContext": "{email}"
              }
      401:
        body:
          examples:
            1020: |
              {
                "code": "users-1020",
                "msg": "Invalid signed request for client {client}"
              }

  put:
    description: Update existing user with userId determined by authentication header. If properties map is provided it will overwrite all existing properties. If profileDTO is provided it will overwrite the existing profile properties.
    is: [authorized, userid]
    securedBy: [auth]
    body:
      type: object
      properties:
        username:
          type: string
          required: true
        email:
          type: string
          required: true
        properties:
          type: object
          required: false
        profile:
          type: profileDTO
          required: false
      example: |
        {
          "username": "anders.nickelsen@leoilab.com",
          "email": "anders.nickelsen@leoilab.com",
          "properties": {
            "role": "doctor",
            "status": "activated"
          },
          "profile": {
              "preferredName": "Mr Hansen",
              "fullName": "Hans Hansen",
              "firstName": "Hans",
              "lastName": "Hansen",
              "birthDate": {
                  "year": 1952,
                  "month": 8,
                  "day": 20
              },
              "gender": "unicorn",
              "sex": "male",
              "heightInCm": 175,
              "weightInKg": 82.6,
              "address": {
                  "streetAndNumber": "Somewhere 1",
                  "city": "Over The Rainbow",
                  "zipcode": "21A53B",
                  "country": "Anywhere"
              },
              "timezone": "GMT"
          }
        }
    responses:
      200:

  get:
    description: Get a list of all users accessible to the logged in user
    is: [authorized, userid]
    securedBy: [auth]
    responses:
      200:
        body:
          type: userDTO[]
          example: |
            [
              {
                "email": "anders.nickelsen@leoilab.com",
                "email_confirmed_at": "2018-08-16T08:29:46Z",
                "username": "anders.nickelsen@leoilab.com",
                "groupId": "fe5b0540-59be-48fe-9795-d102bdd47080",
                "modified": "2016-11-21T13:16:09+01:00",
                "id": "e9096e83-c661-4740-9efd-026d5715c975",
                "profile": {},
                "properties": {},
                "created": "2016-11-21T13:16:09+01:00",
                "active": true,
                "isAdmin": false,
                "identityProvider": "leoilab"
              }
            ]

  patch:
    is: [authorized, userid]
    securedBy: [auth]
    description: patch the logged in user. Keeping all existing attributes not explicitly specified in this body. If properties map is provided it will patch existing properties. If profileDTO is provided it will patch the existing profile.
    body:
      type: object
      properties:
        username:
          type: string
          required: false
        email:
          type: string
          required: false
        properties:
          type: object
          required: false
        profile:
          type: profileDTO
          required: false
      example: |
        {
          "username": "anders.nickelsen@leoilab.com",
          "email": "anders.nickelsen@leoilab.com",
          "properties": {
            "role": "doctor",
            "status":"invited"
          },
          "profile": {
              "preferredName": "Mr Hansen",
              "fullName": "Hans Hansen",
              "firstName": "Hans",
              "lastName": "Hansen",
              "birthDate": {
                  "year": 1952,
                  "month": 8,
                  "day": 20
              },
              "gender": "unicorn",
              "sex": "male",
              "heightInCm": 175,
              "weightInKg": 82.6,
              "address": {
                  "streetAndNumber": "Somewhere 1",
                  "city": "Over The Rainbow",
                  "zipcode": "21A53B",
                  "country": "Anywhere"
              },
              "timezone": "GMT"
          }
        }
    responses:
      200:

  /login:
    post:
      description: |
        Authenticate user via username and password, refresh token, magic token, client credentials, a signed request from Facebook or a signed id from Digitiger.

        {grantType} indicates via "password", "refreshToken", "magicToken", "clientCredentials", "facebook", "digitiger" the requested authentication mode.
        "password" is accompanied by {username}+{password}. {refreshToken} and {magicToken} stand on their own.

        "clientSecret" is accompanied by {userId} and {clientSecret} which is a pre-shared key, intended for trusted servers to access user data.

        "facebook" is accompanied by {signedRequest}, a signed request obtained from Facebook. See https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow for more information.

        "digitiger" is accompanied by {digitigerId} and {signature} from Digitiger.

        If authentication via password fails 10 times, the user is locked. To unlock a user, reset the password, refresh the access token or login via any valid token.
      headers:
        X-Client-Id:
          description: Client application id
          example: imagine
          required: true
      body:
        application/x-www-form-urlencoded:
          properties:
            grantType:
              enum: [ password, refreshToken, magicToken, clientCredentials, facebook, digitiger ]
            username:
              type: string
              required: false
            password:
              type: string
              required: false
            refreshToken:
              type: string
              required: false
            magicToken:
              type: string
              required: false
            clientSecret:
              type: string
              required: false
            userId:
              type: string
              required: false
            signedRequest:
              type: string
              required: false
        application/json:
          examples:
            passwordExample: |
              {
                "grantType": "password",
                "username": "username@leoilab.com",
                "password": "verysecretpassword"
              }
            clientCredentialsExample: |
              {
                "grantType": "clientCredentials",
                "clientSecret": "preSharedClientSecret",
                "userId": "e9096e83-c661-4740-9efd-026d5715c975"
              }
            refreshTokenExample: |
              {
                "grantType": "refreshToken",
                "refreshToken": "e9096e83-c661-4740-9efd-026d5715c975"
              }
            magicTokenExample: |
              {
                "grantType": "magicToken",
                "magicToken": "e9096e83-c661-4740-9efd-026d5715c975"
              }
            signedRequestExample: |
              {
                "grantType": "facebook",
                "signedRequest": "QiOiJlOTA5NmU4My1jNjYxLTQ3NDAtOWVmZC0wMjZkNTcxNWM5NzUiLCJjbGllbnRJZCI6InRlc3QiLCJpc3N1ZWRBdCI6IjIwMTYtMTEtMjF"
              }
            digitigerExample: |
              {
                "grantType": "digitiger",
                "digitigerId": "c2e6f498-2a79-11e7-93ae-92361f002671",
                "signature": "124C1814C601D243C260DA77A62FE9C02736BF78E9633DF064EF7AC021C5D695508AF4101308320824D5B9ACFB57867B6BAAF612813F24CEBA68CB082E5E2A05810B143F21489F07BA5A753DBD8E531EA95274550BB31BB06C74A0C4E2E4FE8CC84BD531688FC01543805D110914161108952DAA7BF9FE0B356953E52896D3EE"
              }

      responses:
        200:
          body:
            type: loginDTO
            examples:
              usernamePasswordExample: |
                {
                  "user": {
                    "isAdmin": false,
                    "email": "MLBxcgOiUe",
                    "username": "MLBxcgOiUe",
                    "groupId": "fe5b0540-59be-48fe-9795-d102bdd47080",
                    "modified": "2016-11-21T13:16:09+01:00",
                    "id": "e9096e83-c661-4740-9efd-026d5715c975",
                    "profile": {},
                    "properties": {},
                    "created": "2016-11-21T13:16:09+01:00",
                    "active": true,
                    "email_confirmed_at": "2016-12-01T13:00:54+01:00",
                    "identityProvider": "leoilab"
                  },
                  "auth": {
                    "tokenType": "bearer",
                    "expiresIn": "600",
                    "issuedAt": "2016-11-21T13:16:09+01:00",
                    "refreshToken": "meq5h3qxrn23wnotfqkahnxfpc67bfwp",
                    "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJlOTA5NmU4My1jNjYxLTQ3NDAtOWVmZC0wMjZkNTcxNWM5NzUiLCJjbGllbnRJZCI6InRlc3QiLCJpc3N1ZWRBdCI6IjIwMTYtMTEtMjFUMTM6MTY6MDkrMDE6MDAiLCJleHBpcmVzSW4iOiI2MDAifQ.R5_sDJgxbYKe4fOxcZXfPO8uZ09RbB1JmWZVZXpNbKw"
                  }
                }
              facebookExample: |
                {
                  "user": {
                    "isAdmin": false,
                    "email": "MLBxcgOiUe",
                    "username": "MLBxcgOiUe",
                    "groupId": "fe5b0540-59be-48fe-9795-d102bdd47080",
                    "modified": "2016-11-21T13:16:09+01:00",
                    "id": "e9096e83-c661-4740-9efd-026d5715c975",
                    "profile": {},
                    "properties": {},
                    "created": "2016-11-21T13:16:09+01:00",
                    "active": true,
                    "email_confirmed_at": "2016-12-01T13:00:54+01:00",
                    "identityProvider": "facebook",
                    "facebookId": "112946565908184"
                  },
                  "auth": {
                    "tokenType": "bearer",
                    "expiresIn": "600",
                    "issuedAt": "2016-11-21T13:16:09+01:00",
                    "refreshToken": "meq5h3qxrn23wnotfqkahnxfpc67bfwp",
                    "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJlOTA5NmU4My1jNjYxLTQ3NDAtOWVmZC0wMjZkNTcxNWM5NzUiLCJjbGllbnRJZCI6InRlc3QiLCJpc3N1ZWRBdCI6IjIwMTYtMTEtMjFUMTM6MTY6MDkrMDE6MDAiLCJleHBpcmVzSW4iOiI2MDAifQ.R5_sDJgxbYKe4fOxcZXfPO8uZ09RbB1JmWZVZXpNbKw"
                  }
                }
              digitigerExample: |
                {
                  "user": {
                    "isAdmin": false,
                    "email": "MLBxcgOiUe",
                    "username": "MLBxcgOiUe",
                    "groupId": "fe5b0540-59be-48fe-9795-d102bdd47080",
                    "modified": "2016-11-21T13:16:09+01:00",
                    "id": "e9096e83-c661-4740-9efd-026d5715c975",
                    "profile": {},
                    "properties": {},
                    "created": "2016-11-21T13:16:09+01:00",
                    "active": true,
                    "email_confirmed_at": "2016-12-01T13:00:54+01:00",
                    "identityProvider": "digitiger",
                    "digitigerId": "c2e6f498-2a79-11e7-93ae-92361f002671"
                  },
                  "auth": {
                    "tokenType": "bearer",
                    "expiresIn": "600",
                    "issuedAt": "2016-11-21T13:16:09+01:00",
                    "refreshToken": "meq5h3qxrn23wnotfqkahnxfpc67bfwp",
                    "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJlOTA5NmU4My1jNjYxLTQ3NDAtOWVmZC0wMjZkNTcxNWM5NzUiLCJjbGllbnRJZCI6InRlc3QiLCJpc3N1ZWRBdCI6IjIwMTYtMTEtMjFUMTM6MTY6MDkrMDE6MDAiLCJleHBpcmVzSW4iOiI2MDAifQ.R5_sDJgxbYKe4fOxcZXfPO8uZ09RbB1JmWZVZXpNbKw"
                  }
                }
        401:
          body:
            examples:
              1003: |
                {
                  "code": "users-1003",
                  "msg": "Invalid user credentials for {username} for client {client}"
                }
              1009: |
                {
                  "code": "users-1009",
                  "msg": "Invalid refresh token."
                }
              1010: |
                {
                  "code": "users-1010",
                  "msg": "Refresh token is expired."
                }
              1012: |
                {
                  "code": "users-1012",
                  "msg": "Invalid magic token."
                }
              1013: |
                {
                  "code": "users-1013",
                  "msg": "Magic token is expired."
                }
              1014: |
                {
                  "code": "users-1014",
                  "msg": "Client not authorized for this grant type"
                }
              1015: |
                {
                  "code": "users-1015",
                  "msg": "Invalid client credentials for client {client}"
                }
              1020: |
                {
                  "code": "users-1020",
                  "msg": "Invalid signed request for client {client}"
                }
              1023: |
                {
                  "code": "users-1023",
                  "msg": "User {username} is locked. Reset password or login via token to unlock user."
                }

        404:
          body:
            examples:
              1021: |
                {
                  "code": "users-1021",
                  "msg": "Facebook id {facebookId} not found for client {clientId}"
                }
              1024: |
                {
                  "code": "users-1024",
                  "msg": "Digitiger id {digitigerId} not found for client {clientId}"
                }
              1025: |
                {
                  "code": "users-1025",
                  "msg": "Unable to verify signature of digitiger id."
                }


/v1/users/list:
  post:
    description: List users accessible by authorized user. The users listed is the intersection between provided userIds and the accessible users.
    is: authorized
    securedBy: [auth]
    body:
      type: string[]
      example: |
        [
          "e9096e83-c661-4740-9efd-026d5715c975",
          "806d3a56-73e5-485d-9663-974cc012147a"
        ]
    responses:
      200:
        description: List users accessible by the authorized user. The users listed is the intersection between provided userIds and the accessible users.
        body:
          example: |
            [
              {
                "email": "anders.nickelsen@leoilab.com",
                "username": "anders.nickelsen@leoilab.com",
                "groupId": "fe5b0540-59be-48fe-9795-d102bdd47080",
                "modified": "2016-11-21T13:16:09+01:00",
                "id": "e9096e83-c661-4740-9efd-026d5715c975",
                "profile": {},
                "properties": {},
                "created": "2016-11-21T13:16:09+01:00",
                "active": true,
                "identityProvider": "leoilab",
                "isAdmin": false
              },
              {
                "email": "andreas.frisch@leoilab.com",
                "username": "andreas.frisch@leoilab.com",
                "groupId": "fe5b01240-59be-48fe-9795-d102bdd4708",
                "modified": "2016-11-21T13:16:09+01:00",
                "id": "e9096e83-c771-4740-9efd-26d5125c975",
                "profile": {
                    "preferredName": "frisch",
                    "fullName": "Andreas Frisch",
                    "firstName": "Andreas",
                    "lastName": "Frisch",
                    "birthDate": {
                        "day": 24
                    },
                    "gender": "unicorn",
                    "sex": "male",
                    "heightInCm": 183
                }
                "properties": {},
                "created": "2017-01-10T10:15:00+01:00",
                "active": true,
                "identityProvider": "leoilab",
                "isAdmin": true
              }
            ]

/v1/users/search:
  post:
    description: Will always return 501 Not Implemented
    is: authorized
    securedBy: [auth]
    body:
      properties:
        query: string
        limit?: integer
        page?: integer
      example: |
        {
          "query": "leoilab",
          "limit": 20,
          "page": 2
        }
    responses:
      501:

/v1/users/{userId}:
  put:
    is: [authorized, userid]
    securedBy: [auth]
    description: Update user identified by {userId}. If email is provided and different from current, will set the email address of user as unconfirmed. If properties map is provided it will overwrite all existing properties. If profileDTO is provided it will overwrite the existing profile properties.
    body:
      type: object
      properties:
        username:
          type: string
          required: true
        email:
          type: string
          required: true
        properties:
          type: object
          required: false
        profile:
          type: profileDTO
          required: false
      example: |
        {
          "username": "anders.nickelsen@leoilab.com",
          "email": "anders.nickelsen@leoilab.com",
          "properties": {
            "role": "doctor",
            "status":"invited"
          },
          "profile": {
              "preferredName": "Mr Hansen",
              "fullName": "Hans Hansen",
              "firstName": "Hans",
              "lastName": "Hansen",
              "birthDate": {
                  "year": 1952,
                  "month": 8,
                  "day": 20
              },
              "gender": "unicorn",
              "sex": "male",
              "heightInCm": 175,
              "weightInKg": 82.6,
              "address": {
                  "streetAndNumber": "Somewhere 1",
                  "city": "Over The Rainbow",
                  "zipcode": "21A53B",
                  "country": "Anywhere"
              },
              "timezone": "GMT"
          }
        }
    responses:
      200:
      400:
        body:
          examples:
            1002: |
              {
                "code": "users-1002",
                "msg": "User {username} already exists for client {client}"
              }
  get:
    securedBy: [auth]
    description: Get user information for {userId}
    responses:
      200:
        body:
          example: |
            {
              "email": "anders.nickelsen@leoilab.com",
              "isAdmin": false,
              "username": "anders.nickelsen@leoilab.com",
              "modified": "2016-08-18T13:48:12+02:00",
              "id": "806d3a56-73e5-485d-9663-974cc012147a",
              "properties": {
                "role": "doctor",
                "status":"invited"
              },
              "profile": {
                  "preferredName": "Mr Hansen",
                  "fullName": "Hans Hansen",
                  "firstName": "Hans",
                  "lastName": "Hansen",
                  "birthDate": {
                      "year": 1952,
                      "month": 8,
                      "day": 20
                  },
                  "gender": "unicorn",
                  "sex": "male",
                  "heightInCm": 175,
                  "weightInKg": 82.6,
                  "address": {
                      "streetAndNumber": "Somewhere 1",
                      "city": "Over The Rainbow",
                      "zipcode": "21A53B",
                      "country": "Anywhere"
                  },
                  "timezone": "GMT"
              },
              "created": "2016-08-18T13:48:12+02:00",
              "email_confirmed_at": "2016-12-01T13:00:54+01:00",
              "identityProvider": "leoilab"
            }
  delete:
    is: [authorized, userid]
    securedBy: [auth]
    description: |
      Deactivate user, anonymize their user profile, email address and user name. 
      At last invalidate user's access token
    responses:
      200:

  patch:
    is: [authorized, userid]
    securedBy: [auth]
    description: patch user identified by {userId}. Keeping all existing attributes not explicitly specified in this body. If properties map is provided it will patch existing properties. If profileDTO is provided it will patch the existing profile.
    body:
      type: object
      properties:
        username:
          type: string
          required: false
        email:
          type: string
          required: false
        properties:
          type: object
          required: false
        profile:
          type: profileDTO
          required: false
      example: |
        {
          "username": "anders.nickelsen@leoilab.com",
          "email": "anders.nickelsen@leoilab.com",
          "properties": {
            "role": "doctor",
            "status":"invited"
          },
          "profile": {
              "preferredName": "Mr Hansen",
              "fullName": "Hans Hansen",
              "firstName": "Hans",
              "lastName": "Hansen",
              "birthDate": {
                  "year": 1952,
                  "month": 8,
                  "day": 20
              },
              "gender": "unicorn",
              "sex": "male",
              "heightInCm": 175,
              "weightInKg": 82.6,
              "address": {
                  "streetAndNumber": "Somewhere 1",
                  "city": "Over The Rainbow",
                  "zipcode": "21A53B",
                  "country": "Anywhere"
              },
              "timezone": "GMT"
          }
        }
    responses:
      200:

/v1/users/requestMagicToken:
  post:
    is: [authorized, userid]
    securedBy: [auth]
    description: Get a magic token for the authenticated user with the specified TTL.
    body:
      multipart/form-data:
        properties:
          expirationInSeconds:
            required: true
            description: For how long time the magic token be valid given in seconds
            type: string
    responses:
      200:
        body:
          example: |
            {
              "magicToken": "ebc7422d-a3ae-4ec1-8a23-5edac5c48a9f"
              "expiresIn": 86400
              "issuedAt": "2016-11-21T13:16:09+01:00"
            }

/v1/users/{userId}/password:
  put:
    is: [authorized, userid, passwordUpdating]
    securedBy: [auth]
    description: Update user's password identified by {userId}
    body:
      type: object
      properties:
        password:
          type: string
          required: true
      example: |
        {
          "password": "correcthorsebatterystaple"
        }
    responses:
      200:

/v1/users/{userId}/properties:
  get:
    is: [authorized, userid]
    securedBy: [auth]
    description: Get user properties for {userId}
    responses:
      200:
        body:
          example: |
            {
              "role": "doctor",
              "status":"invited"
            }
  put:
    is: [authorized, userid]
    securedBy: [auth]
    description: Overwrite user properties for {userId}
    body:
      example: |
        {
          "role": "doctor",
          "status": "activated"
        }
    responses:
      200:

  delete:
    is: [authorized, userid]
    securedBy: [auth]
    description: Delete all user properties for {userId}
    responses:
      200:

  /{property}:
    get:
      is: [authorized, userid]
      securedBy: [auth]
      description: Get value of specific user properties for {userId}
      responses:
        200:
          body:
            example: |
              {
                "role": "doctor"
              }

    put:
      is: [authorized, userid]
      securedBy: [auth]
      description: Set value of specific property for {userId}
      body:
        example: |
          {
            "status": "activated"
          }
      responses:
        200:

/v1/users/{userId}/terms:
  post:
    is: [authorized, userid]
    securedBy: [auth]
    description: DEPRECATED. Accept terms and conditions identified by {termId} for logged in user. {userId} must correspond to the logged in user.
    body:
      type: termIdDTO
      example: |
        {
          "termId": "klikkit_term_v2"
        }
    responses:
      200:
      400:
        body:
          example: |
            {
              "code": "users-1031",
              "msg": "UserId 27baf75d-4efc-4080-b1aa-36dd3366f684 must match logged in user"
            }

  /{termId}:
    get:
      is: [authorized, userid]
      securedBy: [auth]
      description: DEPRECATED. Check whether logged in user has accepted terms identified by {termId}. {userId} must correspond to the logged in user.
      responses:
        200:
          body:
            type: termAcceptedDTO
            example: |
              {
                "isAccepted": true
              }
        400:
          body:
            example: |
              {
                "code": "users-1031",
                "msg": "UserId 27baf75d-4efc-4080-b1aa-36dd3366f684 must match logged in user"
              }

/v1/users/terms:
  post:
    is: [authorized]
    securedBy: [auth]
    description: Accept terms and conditions identified by {termId} for logged in user.
    body:
      type: termIdDTO
      example: |
        {
          "termId": "klikkit_term_v2"
        }
    responses:
      200:

  /{termId}:
    get:
      is: [authorized]
      securedBy: [auth]
      description: Check whether logged in user has accepted terms identified by {termId}.
      responses:
        200:
          body:
            type: termAcceptedDTO
            example: |
              {
                "isAccepted": true
              }

/v1/policies:
  displayName: Policies
  description: The policies control what resource attributes a user can see. Read more in
               [developer integration documentation](https://api.leoilab.com/v1/docs/developer-integration#policies)

  post:
    is: [authorized]
    securedBy: [auth]
    description: Create policies (requires to be an admin).
    body:
      type: policyDTO
      example: |
        {
          "name": "Some policy name",
          "contents": "someKey,anotherKey"
        }
    responses:
      200:
        body:
          example: |
           {
             "id": "eaa03547-49e1-4a57-8910-ce7e48eaba48",
             "name": "Some policy name",
             "contents": "someKey,anotherKey"
           }
      400:
        body:
          example: |
           {
             "code": "users-3002",
             "msg": "Policy with id: d09680a2-a618-47e8-a96b-0ad7f84c303e already exists for client=imagine"
           }
      403:
        body:
          example: |
           {
             "code": "users-3004",
             "msg": "User 27baf75d-4efc-4080-b1aa-36dd3366f684 is not an admin"
           }

  get:
    is: [authorized]
    securedBy: [auth]
    description: Get policies for the authenticated user or the user specified. Requires the requesting user to be an admin.
    queryParameters:
      forUser:
        description: Specify the user id of another user you want to get policies for.
        type: string
        required: false
        example: ccc3201d-0760-4624-a92e-11cdd8e736ca
    responses:
      200:
        body:
          type: policyDTO[]
          example: |
            [
              {
                "id": "d35fee06-b8c8-44cf-bf1c-174e9fa23acf",
                "name": "Some policy name2",
                "contents": "someKey,anotherKey"
              },
              {
                "id": "eaa03547-49e1-4a57-8910-ce7e48eaba48",
                "name": "Some policy name",
                "contents": "someKey,anotherKey"
              }
            ]
      403:

  /{policyId}/attach:
    post:
      is: [authorized]
      securedBy: [auth]
      description: Attach a user to a policy (requires to be an admin).
      body:
        type: attachDTO
        example: |
          {
            "userId": "some-user-id"
          }
      responses:
        200:
          body:
            example: |
             {
               "id": "a4f21a91-0fc1-4bd8-a1a8-c572d3cc84fc",
               "policy": "eaa03547-49e1-4a57-8910-ce7e48eaba48",
               "userId": "27baf75d-4efc-4080-b1aa-36dd3366f684"
             }
        400:
          body:
            example: |
             {
               "code": "users-3005",
               "msg": "User some-user-id already attached to policy eaa03547-49e1-4a57-8910-ce7e48eaba48"
             }
        404:
          body:
            example: |
             {
               "code": "users-3001",
               "msg": "Policy some_valid_uuid not found"
             }
        403:

  /{policyId}/detach:
    post:
      is: [authorized]
      securedBy: [auth]
      description: Detach a user from a policy (requires to be an admin).
      body:
        type: attachDTO
        example: |
          {
            "userId": "some-user-id"
          }
      responses:
        200:
          body:
            example: |
             { }
        404:
          body:
            example: |
             {
               "code": "users-3006",
               "msg": "User 9d2a4864-680b-4db9-8a09-ba9ee9696741 is not attached to policy 86e7f8ab-ac6e-4f08-996f-4d73aeda4e16"
             }
        403:

  /{policyId}:
    put:
      is: [authorized]
      securedBy: [auth]
      description: Update policy (requires admin access token).
      body:
        type: policyUpdateDTO
        example: |
          {
            "name": "Some updated policy name",
            "contents": "someKey,anotherKey"
          }
      responses:
        200:
          body:
            example: {}
    delete:
      is: [authorized]
      securedBy: [auth]
      description: Delete policy (requires admin access token).
      responses:
        200:
          body:
            example: {}

  /{policyId}/users:
    get:
      is: [authorized]
      securedBy: [auth]
      description: List user ids of a policy (requires admin access token).
      responses:
        200:
          body:
            example: |
              ["some-user-id", "another-user-id"]

/v1/users/resetPassword:
  displayName: Reset password
  description: Reset user's password based on email address. Link contained in email is valid for 1 hour.
  post:
    is: [ mailInteracting ]
    description: |
      Sends email to user containing a link where new password can be set.

      If you want to customize the email you need to add templates named:

      * `{clientId}-reset-password-en-us-production`
      * `{clientId}-reset-password-en-us-staging`

      and label them with `reset-password`

      &nbsp;

      [You can customize the template as you like.](https://mandrill.zendesk.com/hc/en-us/articles/205582507-Getting-Started-with-Templates) The server provides these merge tags:
       * `token` - the secret token the user needs to be able to update their password. The token is valid for 1 hour.
       * `clientId` - your apps client id.
       * `baseUrl` - url pointing to base of either staging (`api-staging.leoilab.com`) or production (`api.leoilab.com`)

      &nbsp;

       **Localization**

       You can create localized templates by adding templates with the naming scheme
       `{clientId}-reset-password-{locale}-{production|staging}`. The localized email can then be sent by
       providing the locale in the request.

       The default fallback locale is `en-us` if `locale` is not provided with the request,
       or no template exist for the provided locale.

    headers:
      X-Client-Id:
        description: Client application id
        example: imagine
        required: true
    body:
      application/x-www-form-urlencoded:
        type: string
        example: email=leo@leoilab.com
      application/json:
        properties:
          email:
            type: string
          locale:
            type: string
            required: false
        example: |
          {
            "email": "leo@leoilab.com",
            "locale": "da-DK"
          }
    responses:
      200:

  /token:
    post:
      description: Set new password using token from reset email.
      is: [passwordUpdating]
      headers:
        X-Client-Id:
          description: Client application id
          example: imagine
          required: true
      body:
        application/x-www-form-urlencoded:
          type: string
          example: newPassword=abcd&token=ABCDEFGHIJKLMN
        application/json:
          properties:
            newPassword:
              type: string
            token:
              type: string
          example: |
            {
              "newPassword": "correcthorsebatterystaple",
              "token": "ABCDEFGHIJKLMN"
            }
      responses:
        200:


/v1/users/confirmEmail:
  displayName: Email confirmation
  description: |
    Confirm a user's registered email address. The token provided is valid for 1 year.

    By doing the `POST` an email is sent to the authenticated user containing a link with a confirmation token.
    The link points to the `GET` endpoint which the user can click to confirm their email using the
    generic platform landing page.

    If you want to customize the email you need to add templates named:

    * `{clientId}-confirm-email-en-us-production`
    * `{clientId}-confirm-email-en-us-staging`

    and label them with `confirm-email`.

    &nbsp;

    [You can customize the template as you like.](https://mandrill.zendesk.com/hc/en-us/articles/205582507-Getting-Started-with-Templates) The server provides these merge tags:
     * `token` - the secret token the user needs to be able to confirm their email. The token is valid for 1 hour.
     * `clientId` - your apps client id.
     * `baseUrl` - url pointing to base of either staging (`api-staging.leoilab.com`) or production (`api.leoilab.com`)

    &nbsp;

    **Customizing the confirmation page**

    The query parameter `redirect` can be set for the `GET` endpoint in the email template.

    The server will send back a `303 See Other` with the location header set to the redirect URI with the `success` query parameter added.

    `success` will have on of the following values:

      * `success` on successful email confirmation
      * `expired` if the token used has expired
      * `noToken` if the token could not be found - this would usually indicate that the user has already confirmed their email

    &nbsp;

     **Localization**

     You can create localized templates by adding templates with the naming scheme
     `{clientId}-confirm-email-{locale}-{production|staging}`. The localized email can then be sent by
     providing the locale in the request.

     The default fallback locale is `en-us` if `locale` is not provided with the request,
     or no template exist for the provided locale.

  post:
    is: [mailInteracting]
    description: |
      **Authorized call**

      Sends email to the address registered with the authorized user. The body is optional, and otherwise only the `locale`
      field should be supplied. Leaving `locale` out will make the service default to 'en-us' locale.

      &nbsp;

      **Unauthorized call**

      Sends email to the email address given in the POST body. The locale is optional using the un-authenticated endpoint.
      This endpoint will always return 200 OK.

      &nbsp;

      **When is the email confirmed**

      Confirmation is achieved when the user clicks the email link which sets `user.email_confirmed_at` to "now" (i.e. the current DateTime).
    body:
      application/json:
        properties:
          email?:
            type: string
          locale?:
            type: string
        example: |
          {
            "locale": "da-dk"
          }
    responses:
      200:

  get:
    description: |
      The endpoint to verify a user's email with, using the token sent by `POST /v1/users/confirmEmail`.
    queryParameters:
      token:
        description: The token sent to the user
        required: true
        example: "140f24c9-21f7-4e90-87f7-c2cf8ef1ace1"
      clientId:
        description: The users' client id
        required: true
        example: "imagine"
      redirect:
        description: URL encoded URL to redirect the user to after the confirmation is complete
        required: false
        example: "http%3A%2F%2Fwww.google.com"
    responses:
      400:
        body:
          application/json:
            examples:
              1102: |
                {
                  "code": "error-1102",
                  "msg": "Request is missing required query parameter 'clientId'"
                }
      404:
        body:
          application/json:
            examples:
              1029: |
                {
                  "code": "users-1029",
                  "msg": "Bad redirect URI. Did you URL encode it properly? Parse error: Illegal URI reference, unexpected character '\"' at position 29: \nhttps://www.google.com?query=\"something\" strange\n                             ^\n"
                }


/v1/users/magicLink:
  displayName: Magic link (Login via email)
  description: Carry out password-less login leveraging the confirmed email address of the user. Link contained in email is valid for 30 minutes.
  post:
    is: [ mailInteracting ]
    description: |
      Sends email to the confirmed email address of the authorized user. The email contains a token which exchanges for a login response using grantType "magicToken".
      The user's email must be registered and confirmed for a mail to be sent.

      You need to add templates named like the following to Mandrill:

      * `{clientId}-magic-link-en-us-production`
      * `{clientId}-magic-link-en-us-staging`

      There is no default template and a missing client specific template results in a 500 error.

      The templates must be labeled with `magic-link`.

      &nbsp;

      [You can customize the template as you like.](https://mandrill.zendesk.com/hc/en-us/articles/205582507-Getting-Started-with-Templates) The server will provide these merge tags:
      * `token` - the magic token needed to login (see /login). The token is valid for 24 hours.
      * `clientId` - your apps client id.
      * `baseUrl` - url pointing to base of either staging (`api-staging.leoilab.com`) or production (`api.leoilab.com`)

      &nbsp;

      **Localization**

      You can create localized templates by adding templates with the naming scheme
      `{clientId}-magic-link-{locale}-{production|staging}`. The localized email can then be sent by
      providing the locale in the request.

      The default fallback locale is `en-us` if `locale` is not provided with the request,
      or no template exist for the provided locale.

      To provide a QR code in the customized email use e.g. http://goqr.me/api/ and add a Code block in your template with `<img class="mcnImage" src="http://api.qrserver.com/v1/create-qr-code/?data={appUri}&size=200x200" />` with {appUri} being `platform.leoilab.com/?clientId=*|clientId|*&token=*|token|*`.

    headers:
      X-Client-Id:
        description: Client application id
        example: imagine
        required: true
    body:
      application/json:
        type: magicLinkDTO
        example: |
          {
            "email": "leo@leoilab.com",
            "locale": "da-DK"
          }
      application/x-www-form-urlencoded:
        type: string
        required: true
        example: "email=leo@leoilab.com&locale=da-DK"

    responses:
      200:
      404:
        description: Email not found; or email not confirmed
        body:
          application/json:
            examples:
              1016: |
                {
                  "code": "users-1016",
                  "msg": "No user registered with email {email} for client {client}"
                }
              1017: |
                {
                  "code": "users-1017",
                  "msg": "Email {email} for client {client} not confirmed by user"
                }

/v1/users/deleteMe:
  displayName: Request user deletion
  description: An email based flow for handling user deletion. Link contained in email is valid for 24 hours.

  post:
    is: [ mailInteracting ]
    description: |
      Initiate self-service user deletion of user associated with email address. If the email is registered for the provided client id, she receives an email with further instructions.

      To customize the email you need to add a mail template named `{clientId}-delete-me`. This approach also allow for using custom landing pages.

      [You can customize the template as you like.](https://mandrill.zendesk.com/hc/en-us/articles/205582507-Getting-Started-with-Templates) The server provides these merge tags:
      * `token` - the secret token a user needs to verify their account deletion. The token is valid for 24 hours.
      * `clientId` - app client id.
      * `baseUrl` - url pointing to base of either staging (`api-staging.leoilab.com`) or production (`api.leoilab.com`)

    headers:
      X-Client-Id:
        description: Client application id
        example: imagine
        required: true
    body:
      application/json:
        type: deleteByEmailDTO
        example: |
          {
            "email": "leo@leoilab.com"
          }
      application/x-www-form-urlencoded:
        example:
          email=leo@leoilab.com
    responses:
      200:

  get:
    description: Default landing page for user deletion. Given valid token and clientid this page will asynchronously delete user.
    queryParameters:
      magicToken:
        description: Token identifying user.
      clientId:
        description: ClientId that registered user.
    responses:
      200:

/v1/tokens/introspect:
  displayName: OAuth2 token introspection endpoint [RFC-7662](https://tools.ietf.org/html/rfc7662)
  description: Introspects access token to reveal if tokens are still active. Only access tokens are supported.

  post:
    is: [authorized]
    securedBy: [auth]
    body:
      application/x-www-form-urlencoded:
        example:
          token=abcd1234
      application/json:
        example: |
          {
            "token": "abcd1234"
          }
    responses:
      200:
        body:
          application/json:
            type: introspectionDTO
            example: |
              {
                "active": true
              }
