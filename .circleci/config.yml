# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    
    working_directory: ~/repo
    
    steps:
      - checkout
      
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "backend/requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r backend/requirements.txt
      
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "backend/requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python backend/metube/manage.py test
      
      - store_artifacts:
          path: test-reports
          destination: test-reports
  
  push-image:
    docker:
      - image: circleci/python:3.6.1
      
    working_directory: ~/repo
    
    steps:
      - checkout
      - setup-remote-docker
      - run:
         name: install aws
         command: |
           curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
           unzip awscli-bundle.zip
           sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
         name: "Log in to AWS ECR"
         command: eval $(aws ecr get-login --region eu-central-1 --no-include-email)
      - run:
          name: Build docker container and push it
          command: |
            docker build -t metube/api backend/
            docker tag metube/api:latest 624540041426.dkr.ecr.eu-central-1.amazonaws.com/metube/api:latest
            docker push 624540041426.dkr.ecr.eu-central-1.amazonaws.com/metube/api:latest
            
            docker build -t metube/nginx nginx/
            docker tag metube/nginx:latest 624540041426.dkr.ecr.eu-central-1.amazonaws.com/metube/nginx:latest
            docker push 624540041426.dkr.ecr.eu-central-1.amazonaws.com/metube/nginx:latest
  
  deploy:
    docker:
      - image: circleci/python:3.6.1
      
    working_directory: ~/repo
    
    steps:
      - checkout

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - push-image:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - push-image
          filters:
            branches:
              only:
                - master
